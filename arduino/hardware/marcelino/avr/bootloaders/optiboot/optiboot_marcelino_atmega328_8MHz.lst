
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fc2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000256  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000ce4  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea7  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001de3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	84 b7       	in	r24, 0x34	; 52
    7e04:	14 be       	out	0x34, r1	; 52
    7e06:	98 2f       	mov	r25, r24
    7e08:	9d 70       	andi	r25, 0x0D	; 13
    7e0a:	09 f0       	breq	.+2      	; 0x7e0e <main+0xe>
    7e0c:	d4 d0       	rcall	.+424    	; 0x7fb6 <appStart>
    7e0e:	85 e0       	ldi	r24, 0x05	; 5
    7e10:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7e14:	82 e0       	ldi	r24, 0x02	; 2
    7e16:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e1a:	88 e1       	ldi	r24, 0x18	; 24
    7e1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7e20:	86 e0       	ldi	r24, 0x06	; 6
    7e22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7e26:	88 e0       	ldi	r24, 0x08	; 8
    7e28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7e2c:	8e e0       	ldi	r24, 0x0E	; 14
    7e2e:	ae d0       	rcall	.+348    	; 0x7f8c <watchdogConfig>
    7e30:	25 9a       	sbi	0x04, 5	; 4
    7e32:	86 e0       	ldi	r24, 0x06	; 6
    7e34:	28 e1       	ldi	r18, 0x18	; 24
    7e36:	3e ef       	ldi	r19, 0xFE	; 254
    7e38:	91 e0       	ldi	r25, 0x01	; 1
    7e3a:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7e3e:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    7e42:	96 bb       	out	0x16, r25	; 22
    7e44:	b0 9b       	sbis	0x16, 0	; 22
    7e46:	fe cf       	rjmp	.-4      	; 0x7e44 <main+0x44>
    7e48:	1d 9a       	sbi	0x03, 5	; 3
    7e4a:	a8 95       	wdr
    7e4c:	81 50       	subi	r24, 0x01	; 1
    7e4e:	a9 f7       	brne	.-22     	; 0x7e3a <main+0x3a>
    7e50:	c0 e0       	ldi	r28, 0x00	; 0
    7e52:	d0 e0       	ldi	r29, 0x00	; 0
    7e54:	93 e0       	ldi	r25, 0x03	; 3
    7e56:	f9 2e       	mov	r15, r25
    7e58:	ee 24       	eor	r14, r14
    7e5a:	e3 94       	inc	r14
    7e5c:	25 e0       	ldi	r18, 0x05	; 5
    7e5e:	d2 2e       	mov	r13, r18
    7e60:	31 e1       	ldi	r19, 0x11	; 17
    7e62:	c3 2e       	mov	r12, r19
    7e64:	87 d0       	rcall	.+270    	; 0x7f74 <getch>
    7e66:	81 34       	cpi	r24, 0x41	; 65
    7e68:	81 f4       	brne	.+32     	; 0x7e8a <main+0x8a>
    7e6a:	84 d0       	rcall	.+264    	; 0x7f74 <getch>
    7e6c:	18 2f       	mov	r17, r24
    7e6e:	94 d0       	rcall	.+296    	; 0x7f98 <verifySpace>
    7e70:	12 38       	cpi	r17, 0x82	; 130
    7e72:	29 f4       	brne	.+10     	; 0x7e7e <main+0x7e>
    7e74:	82 e0       	ldi	r24, 0x02	; 2
    7e76:	77 d0       	rcall	.+238    	; 0x7f66 <putch>
    7e78:	80 e1       	ldi	r24, 0x10	; 16
    7e7a:	75 d0       	rcall	.+234    	; 0x7f66 <putch>
    7e7c:	f3 cf       	rjmp	.-26     	; 0x7e64 <main+0x64>
    7e7e:	11 38       	cpi	r17, 0x81	; 129
    7e80:	11 f4       	brne	.+4      	; 0x7e86 <main+0x86>
    7e82:	86 e0       	ldi	r24, 0x06	; 6
    7e84:	f8 cf       	rjmp	.-16     	; 0x7e76 <main+0x76>
    7e86:	83 e0       	ldi	r24, 0x03	; 3
    7e88:	f6 cf       	rjmp	.-20     	; 0x7e76 <main+0x76>
    7e8a:	82 34       	cpi	r24, 0x42	; 66
    7e8c:	19 f4       	brne	.+6      	; 0x7e94 <main+0x94>
    7e8e:	84 e1       	ldi	r24, 0x14	; 20
    7e90:	8b d0       	rcall	.+278    	; 0x7fa8 <getNch>
    7e92:	f2 cf       	rjmp	.-28     	; 0x7e78 <main+0x78>
    7e94:	85 34       	cpi	r24, 0x45	; 69
    7e96:	11 f4       	brne	.+4      	; 0x7e9c <main+0x9c>
    7e98:	85 e0       	ldi	r24, 0x05	; 5
    7e9a:	fa cf       	rjmp	.-12     	; 0x7e90 <main+0x90>
    7e9c:	85 35       	cpi	r24, 0x55	; 85
    7e9e:	49 f4       	brne	.+18     	; 0x7eb2 <main+0xb2>
    7ea0:	69 d0       	rcall	.+210    	; 0x7f74 <getch>
    7ea2:	c8 2f       	mov	r28, r24
    7ea4:	d0 e0       	ldi	r29, 0x00	; 0
    7ea6:	66 d0       	rcall	.+204    	; 0x7f74 <getch>
    7ea8:	d8 2b       	or	r29, r24
    7eaa:	cc 0f       	add	r28, r28
    7eac:	dd 1f       	adc	r29, r29
    7eae:	74 d0       	rcall	.+232    	; 0x7f98 <verifySpace>
    7eb0:	e3 cf       	rjmp	.-58     	; 0x7e78 <main+0x78>
    7eb2:	86 35       	cpi	r24, 0x56	; 86
    7eb4:	21 f4       	brne	.+8      	; 0x7ebe <main+0xbe>
    7eb6:	84 e0       	ldi	r24, 0x04	; 4
    7eb8:	77 d0       	rcall	.+238    	; 0x7fa8 <getNch>
    7eba:	80 e0       	ldi	r24, 0x00	; 0
    7ebc:	dc cf       	rjmp	.-72     	; 0x7e76 <main+0x76>
    7ebe:	84 36       	cpi	r24, 0x64	; 100
    7ec0:	09 f0       	breq	.+2      	; 0x7ec4 <main+0xc4>
    7ec2:	32 c0       	rjmp	.+100    	; 0x7f28 <main+0x128>
    7ec4:	57 d0       	rcall	.+174    	; 0x7f74 <getch>
    7ec6:	56 d0       	rcall	.+172    	; 0x7f74 <getch>
    7ec8:	b8 2e       	mov	r11, r24
    7eca:	54 d0       	rcall	.+168    	; 0x7f74 <getch>
    7ecc:	a8 2e       	mov	r10, r24
    7ece:	00 e0       	ldi	r16, 0x00	; 0
    7ed0:	11 e0       	ldi	r17, 0x01	; 1
    7ed2:	50 d0       	rcall	.+160    	; 0x7f74 <getch>
    7ed4:	f8 01       	movw	r30, r16
    7ed6:	81 93       	st	Z+, r24
    7ed8:	8f 01       	movw	r16, r30
    7eda:	be 12       	cpse	r11, r30
    7edc:	fa cf       	rjmp	.-12     	; 0x7ed2 <main+0xd2>
    7ede:	5c d0       	rcall	.+184    	; 0x7f98 <verifySpace>
    7ee0:	f5 e4       	ldi	r31, 0x45	; 69
    7ee2:	af 12       	cpse	r10, r31
    7ee4:	01 c0       	rjmp	.+2      	; 0x7ee8 <main+0xe8>
    7ee6:	ff cf       	rjmp	.-2      	; 0x7ee6 <main+0xe6>
    7ee8:	fe 01       	movw	r30, r28
    7eea:	f7 be       	out	0x37, r15	; 55
    7eec:	e8 95       	spm
    7eee:	07 b6       	in	r0, 0x37	; 55
    7ef0:	00 fc       	sbrc	r0, 0
    7ef2:	fd cf       	rjmp	.-6      	; 0x7eee <main+0xee>
    7ef4:	fe 01       	movw	r30, r28
    7ef6:	a0 e0       	ldi	r26, 0x00	; 0
    7ef8:	b1 e0       	ldi	r27, 0x01	; 1
    7efa:	8c 91       	ld	r24, X
    7efc:	11 96       	adiw	r26, 0x01	; 1
    7efe:	2c 91       	ld	r18, X
    7f00:	11 97       	sbiw	r26, 0x01	; 1
    7f02:	90 e0       	ldi	r25, 0x00	; 0
    7f04:	92 2b       	or	r25, r18
    7f06:	0c 01       	movw	r0, r24
    7f08:	e7 be       	out	0x37, r14	; 55
    7f0a:	e8 95       	spm
    7f0c:	11 24       	eor	r1, r1
    7f0e:	32 96       	adiw	r30, 0x02	; 2
    7f10:	12 96       	adiw	r26, 0x02	; 2
    7f12:	ba 12       	cpse	r11, r26
    7f14:	f2 cf       	rjmp	.-28     	; 0x7efa <main+0xfa>
    7f16:	fe 01       	movw	r30, r28
    7f18:	d7 be       	out	0x37, r13	; 55
    7f1a:	e8 95       	spm
    7f1c:	07 b6       	in	r0, 0x37	; 55
    7f1e:	00 fc       	sbrc	r0, 0
    7f20:	fd cf       	rjmp	.-6      	; 0x7f1c <main+0x11c>
    7f22:	c7 be       	out	0x37, r12	; 55
    7f24:	e8 95       	spm
    7f26:	a8 cf       	rjmp	.-176    	; 0x7e78 <main+0x78>
    7f28:	84 37       	cpi	r24, 0x74	; 116
    7f2a:	71 f4       	brne	.+28     	; 0x7f48 <main+0x148>
    7f2c:	23 d0       	rcall	.+70     	; 0x7f74 <getch>
    7f2e:	22 d0       	rcall	.+68     	; 0x7f74 <getch>
    7f30:	b8 2e       	mov	r11, r24
    7f32:	20 d0       	rcall	.+64     	; 0x7f74 <getch>
    7f34:	31 d0       	rcall	.+98     	; 0x7f98 <verifySpace>
    7f36:	8e 01       	movw	r16, r28
    7f38:	f8 01       	movw	r30, r16
    7f3a:	85 91       	lpm	r24, Z+
    7f3c:	8f 01       	movw	r16, r30
    7f3e:	13 d0       	rcall	.+38     	; 0x7f66 <putch>
    7f40:	ba 94       	dec	r11
    7f42:	b1 10       	cpse	r11, r1
    7f44:	f9 cf       	rjmp	.-14     	; 0x7f38 <main+0x138>
    7f46:	98 cf       	rjmp	.-208    	; 0x7e78 <main+0x78>
    7f48:	85 37       	cpi	r24, 0x75	; 117
    7f4a:	39 f4       	brne	.+14     	; 0x7f5a <main+0x15a>
    7f4c:	25 d0       	rcall	.+74     	; 0x7f98 <verifySpace>
    7f4e:	8e e1       	ldi	r24, 0x1E	; 30
    7f50:	0a d0       	rcall	.+20     	; 0x7f66 <putch>
    7f52:	85 e9       	ldi	r24, 0x95	; 149
    7f54:	08 d0       	rcall	.+16     	; 0x7f66 <putch>
    7f56:	8f e0       	ldi	r24, 0x0F	; 15
    7f58:	8e cf       	rjmp	.-228    	; 0x7e76 <main+0x76>
    7f5a:	81 35       	cpi	r24, 0x51	; 81
    7f5c:	09 f0       	breq	.+2      	; 0x7f60 <main+0x160>
    7f5e:	a7 cf       	rjmp	.-178    	; 0x7eae <main+0xae>
    7f60:	88 e0       	ldi	r24, 0x08	; 8
    7f62:	14 d0       	rcall	.+40     	; 0x7f8c <watchdogConfig>
    7f64:	a4 cf       	rjmp	.-184    	; 0x7eae <main+0xae>

00007f66 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f66:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f6a:	95 ff       	sbrs	r25, 5
    7f6c:	fc cf       	rjmp	.-8      	; 0x7f66 <putch>
  UART_UDR = ch;
    7f6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f72:	08 95       	ret

00007f74 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f74:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f78:	87 ff       	sbrs	r24, 7
    7f7a:	fc cf       	rjmp	.-8      	; 0x7f74 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f7c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f80:	84 fd       	sbrc	r24, 4
    7f82:	01 c0       	rjmp	.+2      	; 0x7f86 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f84:	a8 95       	wdr
  ch = UART_UDR;
    7f86:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    7f8a:	08 95       	ret

00007f8c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f8c:	e0 e6       	ldi	r30, 0x60	; 96
    7f8e:	f0 e0       	ldi	r31, 0x00	; 0
    7f90:	98 e1       	ldi	r25, 0x18	; 24
    7f92:	90 83       	st	Z, r25
  WDTCSR = x;
    7f94:	80 83       	st	Z, r24
    7f96:	08 95       	ret

00007f98 <verifySpace>:
  if (getch() != CRC_EOP) {
    7f98:	ed df       	rcall	.-38     	; 0x7f74 <getch>
    7f9a:	80 32       	cpi	r24, 0x20	; 32
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f9c:	19 f0       	breq	.+6      	; 0x7fa4 <verifySpace+0xc>
    7f9e:	88 e0       	ldi	r24, 0x08	; 8
    7fa0:	f5 df       	rcall	.-22     	; 0x7f8c <watchdogConfig>
  putch(STK_INSYNC);
    7fa2:	ff cf       	rjmp	.-2      	; 0x7fa2 <verifySpace+0xa>
    7fa4:	84 e1       	ldi	r24, 0x14	; 20
    7fa6:	df cf       	rjmp	.-66     	; 0x7f66 <putch>

00007fa8 <getNch>:
void getNch(uint8_t count) {
    7fa8:	cf 93       	push	r28
    7faa:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fac:	e3 df       	rcall	.-58     	; 0x7f74 <getch>
    7fae:	c1 50       	subi	r28, 0x01	; 1
}
    7fb0:	e9 f7       	brne	.-6      	; 0x7fac <getNch+0x4>
  verifySpace();
    7fb2:	cf 91       	pop	r28
    7fb4:	f1 cf       	rjmp	.-30     	; 0x7f98 <verifySpace>

00007fb6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fb6:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fb8:	80 e0       	ldi	r24, 0x00	; 0
    7fba:	e8 df       	rcall	.-48     	; 0x7f8c <watchdogConfig>
    7fbc:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fbe:	ff 27       	eor	r31, r31
    7fc0:	09 94       	ijmp
