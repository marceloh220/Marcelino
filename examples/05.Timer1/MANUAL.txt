
	The Manual of Timer1 Module
	
	This module is compatible with:
									Atmega48A/Atmega48PA,
									Atmega88A/Atmega88PA,
									Atmega168A/Atmega168PA,
									Atmega328/Atmega328P (Arduino Uno).

  Can work with other devices in the mega family,
  but without charge that works with some modifications in the code

  Marcelo H Moraes
  marceloh220@hotmail.com
  
  
  The AVR timer1 is an 16-bit timer/counter hardware, that can be used to generate
  a wide range of functions for a variety of applications.
  
  Module Timer1 is a very useful module with method to offer the
  programmer several easy tools to control this hardware.
  
  This module provides...
  
  
  
  TO Config of timer
  
  prescale(prescale);		//prescale control of timer
  
  Accepted prescaler for this timer are:
  
  1 to CPU_CLOCK/1
  8 to CPU_CLOCK/8
  64 to CPU_CLOCK/64
  256 to CPU_CLOCK/256
  1024 to CPU_CLOCK/1024
  FALLING to detect falling edge in pin T1 (Digital pin 10)
  RISING to detect rising edge in pin T1 (Digital pin 10)
  
  config(mode, top);		//configure the mode of timer
  
  Accept modes for this timer are:
  NORMAL to normal mode timer/counter
  CTC to clear timer when compare, generally used to generete waves forms in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  FAST to generate a fast 8-bit pwm in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  FAST9 to generate a fast 9-bit pwm in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  FAST10 to generate a fast 10-bit pwm in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  CORRECT to generete 8-bit pwm with correct phase in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  CORRECT9 to generete 9-bit pwm with correct phase in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  CORRECT10 to generete 10-bit pwm with correct phase in pins OC1A (Digital pin 9) and OC1B (Digital pin 10)
  VARIABLE to generate pwm with a variable frequency in pins OC1A (Digital pin 9) and OC1B (Digital pin 10) 
  
  This timer has several top options for generating the fixed pwm signal at 8, 9 or 10 bit resolutions.
  Or top variables with comparator A or capture register.
  
  When the timer is configured in CTC mode, the top of timer are determined for the camparator A.

  But when configured for VARIABLE PWM wave generator the top can be configured like CAPT and defined by capture register,
  default, or like COMPA defined by comparator A.
  
  In VARIABLE mode, we can yet configure the mode of pwm in FAST or CORRECT.
  
  Exemple:
	Timer1 timer;
	
	void setup() {
		
		timer.config(VARIABLE,FAST,CAPT);
		
	}
	
  In this case, the pwm is configured with frequency variable (VARIABLE), in mode fast pwm and frequency defined by capture register. 
  
  The pwm cam be configured like FAST to fast pwm, default, or CORRECT to correct phase pwm. 
  
  When the top are configured by comparator A,
  naturely the PWM in OC1A (Digital pin 9) will be disabled,
  but the PWM in OC1B (Digital pin 10) can have its varied frequency with the method "frequency(freq)".
  
  When the top are configured by capture register,
  both pwm pins, digital pin OC1A (Digital pin 9) and OC1B (Digital pin 10) can have its varied frequency with the method "frequency(freq)".
  
  When top is not passed, for default the top value in variable mode is the capture register, CAPT.
  
  
  pinA(mode);			//Configure action for pin OC1A (Digital pin 9) when happens timer value match with value in comparator A
  
  Accepted modes are:
  OFF					//The pin is disconnected
  CHANGE				//Change status of pin when compare match
  SET					//Put pin in high when compare match
  CLEAR					//Put pin in low when compare match
  
  pinB(mode);			//Configure action for pin OC1B (Digital pin 10) when happens timer value match with value in comparator B
  
  Same modes of pinA;
  
  The default of this timer are prescale CPU_CLOCK/64 in NORMAL mode with pinA and pinB disconected.
  That can be change in any time with metodh "prescale(scale)", "config(mode)" "pinA(mode)/pinB(mode)".
 
  For generate waves, the pin OC1A/OC1B (Digital pin 9/Digital pin 10) 
  need be configured like output with "mode(pin,mode)" method of Digital module.
  
  
  
  TO Access registers
  
  timer(value);			//to recharg value in timer
  compA(value);			//to recharg value in comparator A
  compB(value);			//to recharg value in comparator B
  capt(value);			//to recharg value in capture register
  
  char a = timer();		//to get value from timer
  char a = compA();		//to get value from comparator A
  char a = compB();		//to get value from comparator B
  char a = capt();		//to get value from capture register
  
  
  
  TO PWM wave generator
  
  pwmA(value);				//Generate a PWM wave in pin OC1A (Digital pin 9)
  
  pwmA(value, mode);		//Generate a PWM wave in pin OC1A (Digital pin 9)
  Accepted mode are:
  INVERT to inverted PWM wave
  NINVERT to not inverted PWM wave, this mode is default  when mode not is passed
  
  
  pwmB(value);				//Generate a PWM wave in pin OC1B (Digital pin 10)
  
  pwmB(value, mode);
  The modes accepted are the same of pwmA
  Mode not inverted is default when mode not is passed
  
  For generate PWM waves, the pin OC1A/OC1B (Digital pin 9/Digital pin5) 
  need be configured like output with "mode(pin,mode)" method of Digital module.
 
  
  
  TO Control frequency wave
  
  frequency(freq);			//Configure comparator to generate the frequency required
  
  The frequency is calculate with:
  
	frequency = F_CPU / ( 2 * prescale * ( 1 + compA ) )	For mode CTC or VARIABLE CORRECT pwm with comparator A
	
	or:
	
	frequency = F_CPU / ( 2 * prescale * ( 1 + capt ) )		For mode VARIABLE CORRECT pwm with capture register
	
	and:
	
	frequency = F_CPU / ( prescale * ( 1 + compA ) )		For mode VARIABLE FAST pwm with comparator A
	
	or:
	
	frequency = F_CPU / ( prescale * ( 1 + capt ) )			For mode VARIABLE FAST pwm with capture register
	
  The min and max frequency generated by the timer depend on prescaler configured and need be calculated.
  
  LIKE:
  
  In CTC mode and CORRECT mode
  				fmax = F_CPU / (2 * prescale * 1)  		with register selected equal 0
  				fmin = F_CPU / (2 * prescale * 65536)	with register selected equal 65535
  
  In FAST mode
  				fmax = F_CPU / (prescale * 1)  			with register selected equal 0
  				fmin = F_CPU / (prescale * 65536)		with register selected equal 65535
  				
  F_CPU is the current speed clock of microcontroler.
  
  The range out of prescaler limits cause overflow of comparator register and error in wave frequency.
  
  
  TO Interrupts of timer
  
  attach(interrupt, funct);	//Attach a function in a interrupt on timer
  
  The interrupt for this timer are:
  
  OVF to interrupt in timer overflow
  
  When the timer hit the top and overflow to 0, a function passed will be called.
  This is very useful for timings without delays.
 
  
  COMPA to interrupt when timer match with comparator A
  
  When the timer value match with comparator A value, a function passed will be called.
 
  
  COMPB to interrupt when timer match with comparator B
  
  When the timer value match with comparator B value, a function passed will be called.
  
  These last two interrupts can be used to generate actions at different times in the same timer.
  This means a delay in interrupt actions that can be controlled.
 
  Or in CTC mode, this comparators can be used to generate signal with variable frequency.
 
  attach(interrupt, mode, funct);	//Attach a function in a interrupt of capture of the timer
  
  This method need be access with CAPT interrupt and defined mode like:
  
  FALLING to detected a falling edge in CLKO pin (Digital pin 8)
  RISING to detected a rising edge in CLKO pin (Digital pin 8)
  
  
  To test if capture is in falling or rising mode, this module provide:
  
  rising()		//Return TRUE if capture interrupt is in mode RISING
  falling()		//Return TRUE if capture interrupt is in mode FALLING
  
  detach(interrupt, funct);	//Detach a function of an interrupt on timer
  
  Only one function can be attached in an same interrupt each time, the new function attached will replace the older function.
  
  That means, one function can be attached in a OVF interrupt.
  The same function or other function cab be attached in a COMPA interrupt.
  The same function or other function can be attached in a COMPB interrupt.
  And the same function or other function can be attached in a CAPT interrupt.
 
  The attached functions must be of type void.

  
  TO Simple timing
  
  The timer overflow can be calculated for this equation:
  
  time = prescale * ( 65535 - timer(value) ) / CPU_CLOCK
 
   
  The timer compA/compB can be calculated for this equation:
  
  time = prescale * ( 65535 - timer(value) - compA(value) ) / CPU_CLOCK
 
  If timer value is not changed with method "timer(value)", the timer(value) will be 0.

  periode(time);				//Calcule the prescale and timer value to overflow in passed time

  Note:
  The time passed must be in microseconds, it configure the prescaler.
  If prescaler is change in other part of application the timer will be wrong.

  The max and minimal time for the timer1 is:

	In 8MHz
	minimal 1 Microsecond
	maximum 8404992 Microseconds

	In 16MHz
	minimal 1 Microsecond
	maximum 4202496 Microseconds
  
 
	And this is the END.
