
optiboot_atmega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000d50  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed2  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <main>:
    3e00:	11 24       	eor	r1, r1
    3e02:	84 b7       	in	r24, 0x34	; 52
    3e04:	14 be       	out	0x34, r1	; 52
    3e06:	98 2f       	mov	r25, r24
    3e08:	9d 70       	andi	r25, 0x0D	; 13
    3e0a:	09 f0       	breq	.+2      	; 0x3e0e <main+0xe>
    3e0c:	d8 d0       	rcall	.+432    	; 0x3fbe <appStart>
    3e0e:	85 e0       	ldi	r24, 0x05	; 5
    3e10:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3e1a:	88 e1       	ldi	r24, 0x18	; 24
    3e1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3e20:	86 e0       	ldi	r24, 0x06	; 6
    3e22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3e26:	80 e1       	ldi	r24, 0x10	; 16
    3e28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    3e2c:	8e e0       	ldi	r24, 0x0E	; 14
    3e2e:	b2 d0       	rcall	.+356    	; 0x3f94 <watchdogConfig>
    3e30:	25 9a       	sbi	0x04, 5	; 4
    3e32:	86 e0       	ldi	r24, 0x06	; 6
    3e34:	20 e3       	ldi	r18, 0x30	; 48
    3e36:	3c ef       	ldi	r19, 0xFC	; 252
    3e38:	91 e0       	ldi	r25, 0x01	; 1
    3e3a:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3e3e:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3e42:	96 bb       	out	0x16, r25	; 22
    3e44:	b0 9b       	sbis	0x16, 0	; 22
    3e46:	fe cf       	rjmp	.-4      	; 0x3e44 <main+0x44>
    3e48:	1d 9a       	sbi	0x03, 5	; 3
    3e4a:	a8 95       	wdr
    3e4c:	81 50       	subi	r24, 0x01	; 1
    3e4e:	a9 f7       	brne	.-22     	; 0x3e3a <main+0x3a>
    3e50:	d0 e0       	ldi	r29, 0x00	; 0
    3e52:	c0 e0       	ldi	r28, 0x00	; 0
    3e54:	93 e0       	ldi	r25, 0x03	; 3
    3e56:	f9 2e       	mov	r15, r25
    3e58:	ee 24       	eor	r14, r14
    3e5a:	e3 94       	inc	r14
    3e5c:	25 e0       	ldi	r18, 0x05	; 5
    3e5e:	d2 2e       	mov	r13, r18
    3e60:	31 e1       	ldi	r19, 0x11	; 17
    3e62:	c3 2e       	mov	r12, r19
    3e64:	8b d0       	rcall	.+278    	; 0x3f7c <getch>
    3e66:	81 34       	cpi	r24, 0x41	; 65
    3e68:	59 f4       	brne	.+22     	; 0x3e80 <main+0x80>
    3e6a:	88 d0       	rcall	.+272    	; 0x3f7c <getch>
    3e6c:	18 2f       	mov	r17, r24
    3e6e:	98 d0       	rcall	.+304    	; 0x3fa0 <verifySpace>
    3e70:	82 e0       	ldi	r24, 0x02	; 2
    3e72:	12 38       	cpi	r17, 0x82	; 130
    3e74:	f1 f0       	breq	.+60     	; 0x3eb2 <main+0xb2>
    3e76:	83 e0       	ldi	r24, 0x03	; 3
    3e78:	11 38       	cpi	r17, 0x81	; 129
    3e7a:	d9 f4       	brne	.+54     	; 0x3eb2 <main+0xb2>
    3e7c:	86 e0       	ldi	r24, 0x06	; 6
    3e7e:	19 c0       	rjmp	.+50     	; 0x3eb2 <main+0xb2>
    3e80:	82 34       	cpi	r24, 0x42	; 66
    3e82:	19 f4       	brne	.+6      	; 0x3e8a <main+0x8a>
    3e84:	84 e1       	ldi	r24, 0x14	; 20
    3e86:	94 d0       	rcall	.+296    	; 0x3fb0 <getNch>
    3e88:	15 c0       	rjmp	.+42     	; 0x3eb4 <main+0xb4>
    3e8a:	85 34       	cpi	r24, 0x45	; 69
    3e8c:	11 f4       	brne	.+4      	; 0x3e92 <main+0x92>
    3e8e:	85 e0       	ldi	r24, 0x05	; 5
    3e90:	fa cf       	rjmp	.-12     	; 0x3e86 <main+0x86>
    3e92:	85 35       	cpi	r24, 0x55	; 85
    3e94:	49 f4       	brne	.+18     	; 0x3ea8 <main+0xa8>
    3e96:	72 d0       	rcall	.+228    	; 0x3f7c <getch>
    3e98:	c8 2f       	mov	r28, r24
    3e9a:	d0 e0       	ldi	r29, 0x00	; 0
    3e9c:	6f d0       	rcall	.+222    	; 0x3f7c <getch>
    3e9e:	d8 2b       	or	r29, r24
    3ea0:	cc 0f       	add	r28, r28
    3ea2:	dd 1f       	adc	r29, r29
    3ea4:	7d d0       	rcall	.+250    	; 0x3fa0 <verifySpace>
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <main+0xb4>
    3ea8:	86 35       	cpi	r24, 0x56	; 86
    3eaa:	39 f4       	brne	.+14     	; 0x3eba <main+0xba>
    3eac:	84 e0       	ldi	r24, 0x04	; 4
    3eae:	80 d0       	rcall	.+256    	; 0x3fb0 <getNch>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	5d d0       	rcall	.+186    	; 0x3f6e <putch>
    3eb4:	80 e1       	ldi	r24, 0x10	; 16
    3eb6:	5b d0       	rcall	.+182    	; 0x3f6e <putch>
    3eb8:	d5 cf       	rjmp	.-86     	; 0x3e64 <main+0x64>
    3eba:	84 36       	cpi	r24, 0x64	; 100
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <main+0xc0>
    3ebe:	39 c0       	rjmp	.+114    	; 0x3f32 <main+0x132>
    3ec0:	5d d0       	rcall	.+186    	; 0x3f7c <getch>
    3ec2:	5c d0       	rcall	.+184    	; 0x3f7c <getch>
    3ec4:	98 2e       	mov	r9, r24
    3ec6:	5a d0       	rcall	.+180    	; 0x3f7c <getch>
    3ec8:	88 2e       	mov	r8, r24
    3eca:	00 e0       	ldi	r16, 0x00	; 0
    3ecc:	11 e0       	ldi	r17, 0x01	; 1
    3ece:	58 01       	movw	r10, r16
    3ed0:	8f ef       	ldi	r24, 0xFF	; 255
    3ed2:	a8 1a       	sub	r10, r24
    3ed4:	b8 0a       	sbc	r11, r24
    3ed6:	52 d0       	rcall	.+164    	; 0x3f7c <getch>
    3ed8:	f8 01       	movw	r30, r16
    3eda:	80 83       	st	Z, r24
    3edc:	85 01       	movw	r16, r10
    3ede:	9a 10       	cpse	r9, r10
    3ee0:	f6 cf       	rjmp	.-20     	; 0x3ece <main+0xce>
    3ee2:	5e d0       	rcall	.+188    	; 0x3fa0 <verifySpace>
    3ee4:	f5 e4       	ldi	r31, 0x45	; 69
    3ee6:	8f 12       	cpse	r8, r31
    3ee8:	01 c0       	rjmp	.+2      	; 0x3eec <main+0xec>
    3eea:	ff cf       	rjmp	.-2      	; 0x3eea <main+0xea>
    3eec:	fe 01       	movw	r30, r28
    3eee:	f7 be       	out	0x37, r15	; 55
    3ef0:	e8 95       	spm
    3ef2:	07 b6       	in	r0, 0x37	; 55
    3ef4:	00 fc       	sbrc	r0, 0
    3ef6:	fd cf       	rjmp	.-6      	; 0x3ef2 <main+0xf2>
    3ef8:	fe 01       	movw	r30, r28
    3efa:	a0 e0       	ldi	r26, 0x00	; 0
    3efc:	b1 e0       	ldi	r27, 0x01	; 1
    3efe:	9c 91       	ld	r25, X
    3f00:	9d 01       	movw	r18, r26
    3f02:	2e 5f       	subi	r18, 0xFE	; 254
    3f04:	3f 4f       	sbci	r19, 0xFF	; 255
    3f06:	11 96       	adiw	r26, 0x01	; 1
    3f08:	8c 91       	ld	r24, X
    3f0a:	89 27       	eor	r24, r25
    3f0c:	98 27       	eor	r25, r24
    3f0e:	89 27       	eor	r24, r25
    3f10:	0c 01       	movw	r0, r24
    3f12:	e7 be       	out	0x37, r14	; 55
    3f14:	e8 95       	spm
    3f16:	11 24       	eor	r1, r1
    3f18:	32 96       	adiw	r30, 0x02	; 2
    3f1a:	d9 01       	movw	r26, r18
    3f1c:	92 12       	cpse	r9, r18
    3f1e:	ef cf       	rjmp	.-34     	; 0x3efe <main+0xfe>
    3f20:	fe 01       	movw	r30, r28
    3f22:	d7 be       	out	0x37, r13	; 55
    3f24:	e8 95       	spm
    3f26:	07 b6       	in	r0, 0x37	; 55
    3f28:	00 fc       	sbrc	r0, 0
    3f2a:	fd cf       	rjmp	.-6      	; 0x3f26 <main+0x126>
    3f2c:	c7 be       	out	0x37, r12	; 55
    3f2e:	e8 95       	spm
    3f30:	c1 cf       	rjmp	.-126    	; 0x3eb4 <main+0xb4>
    3f32:	84 37       	cpi	r24, 0x74	; 116
    3f34:	71 f4       	brne	.+28     	; 0x3f52 <main+0x152>
    3f36:	22 d0       	rcall	.+68     	; 0x3f7c <getch>
    3f38:	21 d0       	rcall	.+66     	; 0x3f7c <getch>
    3f3a:	b8 2e       	mov	r11, r24
    3f3c:	1f d0       	rcall	.+62     	; 0x3f7c <getch>
    3f3e:	30 d0       	rcall	.+96     	; 0x3fa0 <verifySpace>
    3f40:	8e 01       	movw	r16, r28
    3f42:	f8 01       	movw	r30, r16
    3f44:	85 91       	lpm	r24, Z+
    3f46:	8f 01       	movw	r16, r30
    3f48:	12 d0       	rcall	.+36     	; 0x3f6e <putch>
    3f4a:	ba 94       	dec	r11
    3f4c:	b1 10       	cpse	r11, r1
    3f4e:	f9 cf       	rjmp	.-14     	; 0x3f42 <main+0x142>
    3f50:	b1 cf       	rjmp	.-158    	; 0x3eb4 <main+0xb4>
    3f52:	85 37       	cpi	r24, 0x75	; 117
    3f54:	31 f4       	brne	.+12     	; 0x3f62 <main+0x162>
    3f56:	24 d0       	rcall	.+72     	; 0x3fa0 <verifySpace>
    3f58:	8e e1       	ldi	r24, 0x1E	; 30
    3f5a:	09 d0       	rcall	.+18     	; 0x3f6e <putch>
    3f5c:	84 e9       	ldi	r24, 0x94	; 148
    3f5e:	07 d0       	rcall	.+14     	; 0x3f6e <putch>
    3f60:	8d cf       	rjmp	.-230    	; 0x3e7c <main+0x7c>
    3f62:	81 35       	cpi	r24, 0x51	; 81
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <main+0x168>
    3f66:	9e cf       	rjmp	.-196    	; 0x3ea4 <main+0xa4>
    3f68:	88 e0       	ldi	r24, 0x08	; 8
    3f6a:	14 d0       	rcall	.+40     	; 0x3f94 <watchdogConfig>
    3f6c:	9b cf       	rjmp	.-202    	; 0x3ea4 <main+0xa4>

00003f6e <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f6e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3f72:	95 ff       	sbrs	r25, 5
    3f74:	fc cf       	rjmp	.-8      	; 0x3f6e <putch>
  UART_UDR = ch;
    3f76:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f7a:	08 95       	ret

00003f7c <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f7c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3f80:	87 ff       	sbrs	r24, 7
    3f82:	fc cf       	rjmp	.-8      	; 0x3f7c <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f84:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3f88:	84 fd       	sbrc	r24, 4
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f8c:	a8 95       	wdr
  ch = UART_UDR;
    3f8e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    3f92:	08 95       	ret

00003f94 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f94:	e0 e6       	ldi	r30, 0x60	; 96
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	98 e1       	ldi	r25, 0x18	; 24
    3f9a:	90 83       	st	Z, r25
  WDTCSR = x;
    3f9c:	80 83       	st	Z, r24
}
    3f9e:	08 95       	ret

00003fa0 <verifySpace>:
  if (getch() != CRC_EOP) {
    3fa0:	ed df       	rcall	.-38     	; 0x3f7c <getch>
    3fa2:	80 32       	cpi	r24, 0x20	; 32
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fa6:	88 e0       	ldi	r24, 0x08	; 8
    3fa8:	f5 df       	rcall	.-22     	; 0x3f94 <watchdogConfig>
    3faa:	ff cf       	rjmp	.-2      	; 0x3faa <verifySpace+0xa>
  putch(STK_INSYNC);
    3fac:	84 e1       	ldi	r24, 0x14	; 20
    3fae:	df cf       	rjmp	.-66     	; 0x3f6e <putch>

00003fb0 <getNch>:
void getNch(uint8_t count) {
    3fb0:	cf 93       	push	r28
    3fb2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fb4:	e3 df       	rcall	.-58     	; 0x3f7c <getch>
    3fb6:	c1 50       	subi	r28, 0x01	; 1
    3fb8:	e9 f7       	brne	.-6      	; 0x3fb4 <getNch+0x4>
}
    3fba:	cf 91       	pop	r28
  verifySpace();
    3fbc:	f1 cf       	rjmp	.-30     	; 0x3fa0 <verifySpace>

00003fbe <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fbe:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	e8 df       	rcall	.-48     	; 0x3f94 <watchdogConfig>
    3fc4:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fc6:	ff 27       	eor	r31, r31
    3fc8:	09 94       	ijmp
